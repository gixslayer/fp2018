-- Ciske Harsema - s1010048
-- Steven Wallis de Vries - s1011387

-- 7.4.1
foldr fusion law:

f(a o1 b) = a o2 f b => f . foldr (o1) e = foldr (o2) (f e)

foldr-map fusion law:

foldr (o3) e . map f = foldr (\a b -> f a o3 b) e

foldr (o3) e . map f = foldr (o3) e . foldr (\x xs -> f x : xs) [] -- definition of map
                     = foldr (o4) (foldr (o3) e [])                -- foldr fusion law
                     = foldr (o4) e                                -- definition of foldr

so show that o4 = (\a b -> f a o3 b) yields f'(a o1 b) = a o2 f' b for
    f' = foldr (o3) e
    o1 = \x xs -> f x : xs
    o2 = o4 = \a b -> fa o3 b

rewriting to show equivalence
f'(a o1 b) = foldr (o3) e (a o1 b)   -- definition of f'
           = foldr (o3) e (f a : b)  -- definition of o1
           = f a o3 (foldr (o3) e b) -- definition of foldr
           = a o2 (foldr (o3) e b)   -- specification of o2
           = a o2 f' b               -- specification of f'

hence
foldr (o3) e . map f = foldr (\a b -> f a o3 b) e

-- 7.4.2
second functor law:

map (f . g) = map f . map g

map f . map g = foldr (\x xs -> f x : xs) [] . map g             -- definition of map
              = foldr (\a b -> (\x xs -> f x : xs) $ g a $ b) [] -- foldr-map fusion law
              = foldr (\a b -> f(g a) : b) []                    -- rewrite
              = foldr (\a b -> (f . g) a : b) []                 -- rewrite
              = map (f . g)                                      -- specification of map

-- 7.4.3
bookkeeping law:

reduce . concat = reduce . map reduce
    where reduce = foldr (@) e
          concat = foldr (++) []

reduce . map reduce = foldr (@) e . map reduce                -- definition of reduce
                    = foldr (\a b -> reduce a @ b) e          -- foldr-map fusion law
                    = foldr (\a b -> reduce a @ b) (reduce e) -- specification of reduce
                    = reduce . foldr (++) e                   -- foldr fusion law
                    = reduce . concat                         -- specification of concat

show for fusion law that:

(\a b -> reduce a @ b) a (reduce b) = reduce a @ reduce b = reduce (a ++ b)

reduce a @ reduce b = (foldr (@) e a) @ (reduce b) -- definition of reduce
                    = foldr (@) (reduce b) a       -- rewrite
                    = (reduce . foldr (:) b) a     -- foldr fusion law
                    = reduce (foldr (:) b a)       -- rewrite
                    = reduce (a++b)                -- definition of ++

show for fusion law that:

reduce (a : b) = a @ reduce b

reduce (a : b) = foldr (@) e (a : b) -- definition of reduce
               = a @ foldr (@) e b   -- specification of foldr
               = a @ reduce b        -- specification of reduce

hence
reduce . concat = reduce . map reduce
